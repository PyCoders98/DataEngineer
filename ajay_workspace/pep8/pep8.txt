1.Code Lay-out
  1.1 Use 4 spaces per indentation level.
   1.1.1 Continuation lines should align wrapped elements 		 vertically.When using a hanging indent the following      		 should be considered; there should be no arguments on the 		 first line and further indentation should be used to 	 clearly distinguish itself as a continuation line:
   Example: 
   	# Aligned with opening delimiter.
	foo = long_function_name(var_one, var_two,
                         var_three, var_four)

	# Add 4 spaces (an extra level of indentation) to 		#distinguish arguments from the rest.
	def long_function_name(
        	var_one, var_two, var_three,
        	var_four):
    	    print(var_one)

	# Hanging indents should add a level.
	foo = long_function_name(
    	    var_one, var_two,
    	    var_three, var_four)
    	 
2.Tabs or Spaces?
  Spaces are the preferred indentation method.
  Tabs should be used solely to remain consistent with code that is
  already indented with tabs.
  
3.Maximum Line Length
  Limit all lines to a maximum of 79 characters.
  
4.Should a Line Break Before or After a Binary Operator?
  income = (gross_wages
          + taxable_interest
          + (dividends - qualified_dividends)
          - ira_deduction
          - student_loan_interest)
          
5.Blank Lines
  Surround top-level function and class definitions with two blank
  lines.
  Method definitions inside a class are surrounded by a single
  blank line.
  
6.Imports
  Imports should usually be on separate lines:
  # Correct:
  import os
  import sys
  from subprocess import Popen, PIPE
  
7.String Quotes
  In Python, single-quoted strings and double-quoted strings are
  the same. This PEP does not make a recommendation for this. Pick
  a rule and stick to it.
  
8.Whitespace in Expressions and Statements
  8.1 Avoid extraneous whitespace in the following situations:
  Immediately inside parentheses, brackets or braces:
  # Correct:
  spam(ham[1], {eggs: 2})
  # Wrong:
  spam( ham[ 1 ], { eggs: 2 } )
  
9.When to Use Trailing Commas
  Trailing commas are usually optional, except they are mandatory
  when making a tuple of one element. For clarity, it is
  recommended to surround the latter in (technically redundant)
  parentheses:
  # Correct:
  FILES = ('setup.cfg',)
  
10.Class Names
   Class names should normally use the CapWords convention.
    
11.Function and Variable Names
   Function names should be lowercase, with words separated by
   underscores as necessary to improve readability.
   Variable names follow the same convention as function names.
   mixedCase is allowed only in contexts where thatâ€™s already the
   prevailing style (e.g. threading.py), to retain backwards
   compatibility.
   
12.Function and Method Arguments
   Always use self for the first argument to instance methods.
   Always use cls for the first argument to class methods.
   
13.Method Names and Instance Variables
   Use the function naming rules: lowercase with words separated
   by underscores as necessary to improve readability.
   Use one leading underscore only for non-public methods and
   instance variables.
   
14.Constants
   Constants are usually defined on a module level and written in
   all capital letters with underscores separating words. Examples
   include MAX_OVERFLOW and TOTAL.
